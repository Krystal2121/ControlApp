/*
Deployment script for ControlMe

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ControlMe"
:setvar DefaultFilePrefix "ControlMe"
:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[CmdLog].[SenderID] on table [dbo].[CmdLog] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[CmdLog])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [dbo].[ControlAppCmd].[SenderId] on table [dbo].[ControlAppCmd] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[ControlAppCmd])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [dbo].[CmdLog]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_CmdLog] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [SenderID] INT            NOT NULL,
    [SubId]    INT            NOT NULL,
    [Content]  NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[CmdLog])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CmdLog] ON;
        INSERT INTO [dbo].[tmp_ms_xx_CmdLog] ([Id], [SubId], [Content])
        SELECT   [Id],
                 [SubId],
                 [Content]
        FROM     [dbo].[CmdLog]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_CmdLog] OFF;
    END

DROP TABLE [dbo].[CmdLog];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_CmdLog]', N'CmdLog';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[ControlAppCmd]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ControlAppCmd] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [SenderId] INT            NOT NULL,
    [SubId]    INT            NOT NULL,
    [Content]  NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ControlAppCmd])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ControlAppCmd] ON;
        INSERT INTO [dbo].[tmp_ms_xx_ControlAppCmd] ([Id], [SubId], [Content])
        SELECT   [Id],
                 [SubId],
                 [Content]
        FROM     [dbo].[ControlAppCmd]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ControlAppCmd] OFF;
    END

DROP TABLE [dbo].[ControlAppCmd];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ControlAppCmd]', N'ControlAppCmd';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Table [dbo].[Block]...';


GO
CREATE TABLE [dbo].[Block] (
    [Id]        INT IDENTITY (1, 1) NOT NULL,
    [BlockerId] INT NOT NULL,
    [BlockeeId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Report]...';


GO
CREATE TABLE [dbo].[Report] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [ReporterId]      INT           NOT NULL,
    [Reportee]        INT           NOT NULL,
    [ReportedCommand] VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Altering Procedure [dbo].[USP_CmdComplete]...';


GO
ALTER PROCEDURE [dbo].[USP_CmdComplete]
	@userID int = 0
AS
BEGIN
	delete from ControlAppCmd where id =(
	SELECT top 1 id from ControlAppCmd where SubId=@userID
	ORDER BY Id)
END
GO
PRINT N'Altering Procedure [dbo].[USP_GetAppContent]...';


GO
ALTER PROCEDURE [dbo].[USP_GetAppContent]
	@userID int = 0
AS
BEGIN
		SELECT TOP 1 '['+convert(varchar(100),SenderId)+']'+ Content from ControlAppCmd where (SubId=@userID or SubId=-1)
		and SenderId not in (select BlockeeId from Block where BlockerId=@userID)
		ORDER BY Id
END
GO
PRINT N'Altering Procedure [dbo].[USP_SendAppCmd]...';


GO
ALTER PROCEDURE [dbo].[USP_SendAppCmd]
	@senderid int,
	@usernm varchar(250),
	@usercmd varchar(max),
	@all int =0
AS
BEGIN
	declare @id int
	IF (@usernm='')
	BEGIN
		if (@all=0)
		BEGIN
			declare @numbers int
			SELECT @numbers=count(*) from Users where  [RandOpt]=1

			declare @which int
			select @which =cast(floor(rand()*@numbers) as int)+1

			SELECT @id=Id FROM Users
			ORDER BY Id
			OFFSET @which-1 ROWS
			FETCH NEXT 1 ROWS ONLY;

			insert into ControlAppCmd
			([SenderId],
			[SubId],
			[Content])
			values (@senderid,@id,@usercmd)

			insert into CmdLog
			([SenderId],[SubId],
			[Content])
			values (@senderid,@id,@usercmd)
		END
		ELSE
		BEGIN
			insert into ControlAppCmd
			select @senderid,Id, @usercmd
			from Users
			 where  [RandOpt]=1

			insert into CmdLog
			([SenderId],[SubId],
			[Content])
			values (@senderid,-1,@usercmd)
		END

	END
	ELSE 
	BEGIN

		select @id=Id from Users where [Screen Name]=@usernm

		insert into ControlAppCmd
		([SenderId],[SubId],
		[Content])
		values (@senderid,@id,@usercmd)

		insert into CmdLog
		([SenderId],[SubId],
		[Content])
		values (@senderid,@id,@usercmd)

	END


END
GO
PRINT N'Creating Procedure [dbo].[USP_BlockUser]...';


GO
CREATE PROCEDURE [dbo].[USP_BlockUser]
	@blocker int = 0,
	@blockee int
AS
	insert into Block
	(BlockerId,
	BlockeeId)
	select @blocker,
	@blockee
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[USP_GetOutstanding]...';


GO
CREATE PROCEDURE [dbo].[USP_GetOutstanding]
	@userID int = 0
AS
BEGIN
		SELECT convert(varchar(100),count(*)) from ControlAppCmd where (SubId=@userID or SubId=-1)
		and SenderId not in (select BlockeeId from Block where BlockerId=@userID)
END
GO
PRINT N'Creating Procedure [dbo].[USP_Report]...';


GO
CREATE PROCEDURE [dbo].[USP_Report]
	@reporter int = 0,
	@reportee int,
	@content varchar(max)
AS

	exec USP_BlockUser @reporter, @reportee

	insert into Report
	(
	ReporterId,
	Reportee,
	ReportedCommand
	)
	select @reporter,
	@reportee,
	@content
RETURN 0
GO
PRINT N'Update complete.';


GO
